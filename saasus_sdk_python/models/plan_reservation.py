# coding: utf-8

"""
    SaaSus Auth API Schema

    スキーマ

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class PlanReservation(BaseModel):
    """
    PlanReservation
    """
    next_plan_id: Optional[StrictStr] = None
    using_next_plan_from: Optional[StrictInt] = Field(None, description="次回料金プラン開始日時（stripe連携時、当月月初の0時（UTC）を指定すると当月月初開始のサブスクリプションを作成できます。ex. 2023年1月の場合は、1672531200 ） (Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.)) ")
    next_plan_tax_rate_id: Optional[StrictStr] = None
    __properties = ["next_plan_id", "using_next_plan_from", "next_plan_tax_rate_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlanReservation:
        """Create an instance of PlanReservation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlanReservation:
        """Create an instance of PlanReservation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlanReservation.parse_obj(obj)

        _obj = PlanReservation.parse_obj({
            "next_plan_id": obj.get("next_plan_id"),
            "using_next_plan_from": obj.get("using_next_plan_from"),
            "next_plan_tax_rate_id": obj.get("next_plan_tax_rate_id")
        })
        return _obj


