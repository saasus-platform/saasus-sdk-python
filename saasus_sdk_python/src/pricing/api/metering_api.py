# coding: utf-8

"""
    SaaSus Pricing API Schema

    SaaSus Pricing API Schema

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from saasus_sdk_python.src.pricing.models.metering_unit import MeteringUnit
from saasus_sdk_python.src.pricing.models.metering_unit_date_count import MeteringUnitDateCount
from saasus_sdk_python.src.pricing.models.metering_unit_date_counts import MeteringUnitDateCounts
from saasus_sdk_python.src.pricing.models.metering_unit_date_period_counts import MeteringUnitDatePeriodCounts
from saasus_sdk_python.src.pricing.models.metering_unit_month_count import MeteringUnitMonthCount
from saasus_sdk_python.src.pricing.models.metering_unit_month_counts import MeteringUnitMonthCounts
from saasus_sdk_python.src.pricing.models.metering_unit_props import MeteringUnitProps
from saasus_sdk_python.src.pricing.models.metering_unit_timestamp_count import MeteringUnitTimestampCount
from saasus_sdk_python.src.pricing.models.metering_units import MeteringUnits
from saasus_sdk_python.src.pricing.models.update_metering_unit_timestamp_count_now_param import UpdateMeteringUnitTimestampCountNowParam
from saasus_sdk_python.src.pricing.models.update_metering_unit_timestamp_count_param import UpdateMeteringUnitTimestampCountParam

from saasus_sdk_python.src.pricing.api_client import ApiClient
from saasus_sdk_python.src.pricing.api_response import ApiResponse
from saasus_sdk_python.src.pricing.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class MeteringApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_metering_unit(self, body : Optional[MeteringUnitProps] = None, **kwargs) -> MeteringUnit:  # noqa: E501
        """Create Metering Unit  # noqa: E501

        Create a metering unit.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_metering_unit(body, async_req=True)
        >>> result = thread.get()

        :param body:
        :type body: MeteringUnitProps
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MeteringUnit
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_metering_unit_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_metering_unit_with_http_info(body, **kwargs)  # noqa: E501

    @validate_arguments
    def create_metering_unit_with_http_info(self, body : Optional[MeteringUnitProps] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Metering Unit  # noqa: E501

        Create a metering unit.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_metering_unit_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param body:
        :type body: MeteringUnitProps
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MeteringUnit, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_metering_unit" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '201': "MeteringUnit",
            '400': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/metering/units', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_metering_unit_by_id(self, metering_unit_id : Annotated[StrictStr, Field(..., description="Metering Unit ID")], **kwargs) -> None:  # noqa: E501
        """Delete Metering Unit  # noqa: E501

        Delete metering unit.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_metering_unit_by_id(metering_unit_id, async_req=True)
        >>> result = thread.get()

        :param metering_unit_id: Metering Unit ID (required)
        :type metering_unit_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_metering_unit_by_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_metering_unit_by_id_with_http_info(metering_unit_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_metering_unit_by_id_with_http_info(self, metering_unit_id : Annotated[StrictStr, Field(..., description="Metering Unit ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Metering Unit  # noqa: E501

        Delete metering unit.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_metering_unit_by_id_with_http_info(metering_unit_id, async_req=True)
        >>> result = thread.get()

        :param metering_unit_id: Metering Unit ID (required)
        :type metering_unit_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'metering_unit_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_metering_unit_by_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['metering_unit_id']:
            _path_params['metering_unit_id'] = _params['metering_unit_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metering/units/{metering_unit_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_metering_unit_timestamp_count(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], timestamp : Annotated[StrictInt, Field(..., description="Timestamp")], **kwargs) -> None:  # noqa: E501
        """Delete Metering Unit Count for Specified Timestamp  # noqa: E501

        Deletes metering unit count for the specified timestamp.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_metering_unit_timestamp_count(tenant_id, metering_unit_name, timestamp, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param timestamp: Timestamp (required)
        :type timestamp: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_metering_unit_timestamp_count_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_metering_unit_timestamp_count_with_http_info(tenant_id, metering_unit_name, timestamp, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_metering_unit_timestamp_count_with_http_info(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], timestamp : Annotated[StrictInt, Field(..., description="Timestamp")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Metering Unit Count for Specified Timestamp  # noqa: E501

        Deletes metering unit count for the specified timestamp.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_metering_unit_timestamp_count_with_http_info(tenant_id, metering_unit_name, timestamp, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param timestamp: Timestamp (required)
        :type timestamp: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'tenant_id',
            'metering_unit_name',
            'timestamp'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_metering_unit_timestamp_count" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant_id']:
            _path_params['tenant_id'] = _params['tenant_id']

        if _params['metering_unit_name']:
            _path_params['metering_unit_name'] = _params['metering_unit_name']

        if _params['timestamp']:
            _path_params['timestamp'] = _params['timestamp']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metering/tenants/{tenant_id}/units/{metering_unit_name}/timestamp/{timestamp}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], var_date : Annotated[StrictStr, Field(..., description="Date")], **kwargs) -> MeteringUnitDateCount:  # noqa: E501
        """Get Metering Unit Count for Specific Date  # noqa: E501

        Gets the metering unit count for a specific date.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date(tenant_id, metering_unit_name, var_date, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param var_date: Date (required)
        :type var_date: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MeteringUnitDateCount
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date_with_http_info(tenant_id, metering_unit_name, var_date, **kwargs)  # noqa: E501

    @validate_arguments
    def get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date_with_http_info(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], var_date : Annotated[StrictStr, Field(..., description="Date")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Metering Unit Count for Specific Date  # noqa: E501

        Gets the metering unit count for a specific date.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date_with_http_info(tenant_id, metering_unit_name, var_date, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param var_date: Date (required)
        :type var_date: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MeteringUnitDateCount, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant_id',
            'metering_unit_name',
            'var_date'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant_id']:
            _path_params['tenant_id'] = _params['tenant_id']

        if _params['metering_unit_name']:
            _path_params['metering_unit_name'] = _params['metering_unit_name']

        if _params['var_date']:
            _path_params['date'] = _params['var_date']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "MeteringUnitDateCount",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/metering/tenants/{tenant_id}/units/{metering_unit_name}/date/{date}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date_period(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], start_timestamp : Annotated[Optional[StrictInt], Field(description="Start Date-Time")] = None, end_timestamp : Annotated[Optional[StrictInt], Field(description="End Date-Time")] = None, **kwargs) -> MeteringUnitDatePeriodCounts:  # noqa: E501
        """Obtain metering unit counts for a specified date/time period  # noqa: E501

        Obtain metering unit counts for a specified date/time period.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date_period(tenant_id, metering_unit_name, start_timestamp, end_timestamp, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param start_timestamp: Start Date-Time
        :type start_timestamp: int
        :param end_timestamp: End Date-Time
        :type end_timestamp: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MeteringUnitDatePeriodCounts
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date_period_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date_period_with_http_info(tenant_id, metering_unit_name, start_timestamp, end_timestamp, **kwargs)  # noqa: E501

    @validate_arguments
    def get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date_period_with_http_info(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], start_timestamp : Annotated[Optional[StrictInt], Field(description="Start Date-Time")] = None, end_timestamp : Annotated[Optional[StrictInt], Field(description="End Date-Time")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Obtain metering unit counts for a specified date/time period  # noqa: E501

        Obtain metering unit counts for a specified date/time period.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date_period_with_http_info(tenant_id, metering_unit_name, start_timestamp, end_timestamp, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param start_timestamp: Start Date-Time
        :type start_timestamp: int
        :param end_timestamp: End Date-Time
        :type end_timestamp: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MeteringUnitDatePeriodCounts, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant_id',
            'metering_unit_name',
            'start_timestamp',
            'end_timestamp'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metering_unit_date_count_by_tenant_id_and_unit_name_and_date_period" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant_id']:
            _path_params['tenant_id'] = _params['tenant_id']

        if _params['metering_unit_name']:
            _path_params['metering_unit_name'] = _params['metering_unit_name']


        # process the query parameters
        _query_params = []
        if _params.get('start_timestamp') is not None:  # noqa: E501
            _query_params.append(('start_timestamp', _params['start_timestamp']))

        if _params.get('end_timestamp') is not None:  # noqa: E501
            _query_params.append(('end_timestamp', _params['end_timestamp']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "MeteringUnitDatePeriodCounts",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/metering/tenants/{tenant_id}/units/{metering_unit_name}/date-period', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_metering_unit_date_count_by_tenant_id_and_unit_name_today(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], **kwargs) -> MeteringUnitDateCount:  # noqa: E501
        """Get Metering Unit Count for the Current Day  # noqa: E501

        Get the metering unit count for the current day.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_unit_date_count_by_tenant_id_and_unit_name_today(tenant_id, metering_unit_name, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MeteringUnitDateCount
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_metering_unit_date_count_by_tenant_id_and_unit_name_today_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_metering_unit_date_count_by_tenant_id_and_unit_name_today_with_http_info(tenant_id, metering_unit_name, **kwargs)  # noqa: E501

    @validate_arguments
    def get_metering_unit_date_count_by_tenant_id_and_unit_name_today_with_http_info(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Metering Unit Count for the Current Day  # noqa: E501

        Get the metering unit count for the current day.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_unit_date_count_by_tenant_id_and_unit_name_today_with_http_info(tenant_id, metering_unit_name, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MeteringUnitDateCount, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant_id',
            'metering_unit_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metering_unit_date_count_by_tenant_id_and_unit_name_today" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant_id']:
            _path_params['tenant_id'] = _params['tenant_id']

        if _params['metering_unit_name']:
            _path_params['metering_unit_name'] = _params['metering_unit_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "MeteringUnitDateCount",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/metering/tenants/{tenant_id}/units/{metering_unit_name}/today', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_metering_unit_date_counts_by_tenant_id_and_date(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], var_date : Annotated[StrictStr, Field(..., description="Date")], **kwargs) -> MeteringUnitDateCounts:  # noqa: E501
        """Get All Metering Unit Counts for a Specified Date  # noqa: E501

        Gets the total metering unit count for the specified date.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_unit_date_counts_by_tenant_id_and_date(tenant_id, var_date, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param var_date: Date (required)
        :type var_date: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MeteringUnitDateCounts
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_metering_unit_date_counts_by_tenant_id_and_date_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_metering_unit_date_counts_by_tenant_id_and_date_with_http_info(tenant_id, var_date, **kwargs)  # noqa: E501

    @validate_arguments
    def get_metering_unit_date_counts_by_tenant_id_and_date_with_http_info(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], var_date : Annotated[StrictStr, Field(..., description="Date")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get All Metering Unit Counts for a Specified Date  # noqa: E501

        Gets the total metering unit count for the specified date.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_unit_date_counts_by_tenant_id_and_date_with_http_info(tenant_id, var_date, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param var_date: Date (required)
        :type var_date: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MeteringUnitDateCounts, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant_id',
            'var_date'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metering_unit_date_counts_by_tenant_id_and_date" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant_id']:
            _path_params['tenant_id'] = _params['tenant_id']

        if _params['var_date']:
            _path_params['date'] = _params['var_date']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "MeteringUnitDateCounts",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/metering/tenants/{tenant_id}/units/date/{date}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_metering_unit_month_count_by_tenant_id_and_unit_name_and_month(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], month : Annotated[StrictStr, Field(..., description="Month")], **kwargs) -> MeteringUnitMonthCount:  # noqa: E501
        """Get the Metering Unit Count for the Specified Month  # noqa: E501

        Gets the metering unit count for the specified month.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_unit_month_count_by_tenant_id_and_unit_name_and_month(tenant_id, metering_unit_name, month, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param month: Month (required)
        :type month: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MeteringUnitMonthCount
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_metering_unit_month_count_by_tenant_id_and_unit_name_and_month_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_metering_unit_month_count_by_tenant_id_and_unit_name_and_month_with_http_info(tenant_id, metering_unit_name, month, **kwargs)  # noqa: E501

    @validate_arguments
    def get_metering_unit_month_count_by_tenant_id_and_unit_name_and_month_with_http_info(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], month : Annotated[StrictStr, Field(..., description="Month")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get the Metering Unit Count for the Specified Month  # noqa: E501

        Gets the metering unit count for the specified month.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_unit_month_count_by_tenant_id_and_unit_name_and_month_with_http_info(tenant_id, metering_unit_name, month, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param month: Month (required)
        :type month: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MeteringUnitMonthCount, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant_id',
            'metering_unit_name',
            'month'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metering_unit_month_count_by_tenant_id_and_unit_name_and_month" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant_id']:
            _path_params['tenant_id'] = _params['tenant_id']

        if _params['metering_unit_name']:
            _path_params['metering_unit_name'] = _params['metering_unit_name']

        if _params['month']:
            _path_params['month'] = _params['month']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "MeteringUnitMonthCount",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/metering/tenants/{tenant_id}/units/{metering_unit_name}/month/{month}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_metering_unit_month_count_by_tenant_id_and_unit_name_this_month(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], **kwargs) -> MeteringUnitMonthCount:  # noqa: E501
        """Get Metering Unit Count for the Current Month  # noqa: E501

        Get the metering unit count for the current month.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_unit_month_count_by_tenant_id_and_unit_name_this_month(tenant_id, metering_unit_name, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MeteringUnitMonthCount
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_metering_unit_month_count_by_tenant_id_and_unit_name_this_month_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_metering_unit_month_count_by_tenant_id_and_unit_name_this_month_with_http_info(tenant_id, metering_unit_name, **kwargs)  # noqa: E501

    @validate_arguments
    def get_metering_unit_month_count_by_tenant_id_and_unit_name_this_month_with_http_info(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Metering Unit Count for the Current Month  # noqa: E501

        Get the metering unit count for the current month.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_unit_month_count_by_tenant_id_and_unit_name_this_month_with_http_info(tenant_id, metering_unit_name, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MeteringUnitMonthCount, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant_id',
            'metering_unit_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metering_unit_month_count_by_tenant_id_and_unit_name_this_month" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant_id']:
            _path_params['tenant_id'] = _params['tenant_id']

        if _params['metering_unit_name']:
            _path_params['metering_unit_name'] = _params['metering_unit_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "MeteringUnitMonthCount",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/metering/tenants/{tenant_id}/units/{metering_unit_name}/thismonth', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_metering_unit_month_counts_by_tenant_id_and_month(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], month : Annotated[StrictStr, Field(..., description="Month")], **kwargs) -> MeteringUnitMonthCounts:  # noqa: E501
        """Get All Metering Unit Counts for the Specified Month  # noqa: E501

        Gets all metering unit counts for the specified month.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_unit_month_counts_by_tenant_id_and_month(tenant_id, month, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param month: Month (required)
        :type month: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MeteringUnitMonthCounts
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_metering_unit_month_counts_by_tenant_id_and_month_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_metering_unit_month_counts_by_tenant_id_and_month_with_http_info(tenant_id, month, **kwargs)  # noqa: E501

    @validate_arguments
    def get_metering_unit_month_counts_by_tenant_id_and_month_with_http_info(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], month : Annotated[StrictStr, Field(..., description="Month")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get All Metering Unit Counts for the Specified Month  # noqa: E501

        Gets all metering unit counts for the specified month.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_unit_month_counts_by_tenant_id_and_month_with_http_info(tenant_id, month, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param month: Month (required)
        :type month: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MeteringUnitMonthCounts, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant_id',
            'month'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metering_unit_month_counts_by_tenant_id_and_month" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant_id']:
            _path_params['tenant_id'] = _params['tenant_id']

        if _params['month']:
            _path_params['month'] = _params['month']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "MeteringUnitMonthCounts",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/metering/tenants/{tenant_id}/units/month/{month}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_metering_units(self, **kwargs) -> MeteringUnits:  # noqa: E501
        """Get all metering units  # noqa: E501

        Get all metering units.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_units(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MeteringUnits
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_metering_units_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_metering_units_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_metering_units_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Get all metering units  # noqa: E501

        Get all metering units.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_metering_units_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MeteringUnits, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metering_units" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "MeteringUnits",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/metering/units', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_metering_unit_by_id(self, metering_unit_id : Annotated[StrictStr, Field(..., description="Metering Unit ID")], body : Optional[MeteringUnitProps] = None, **kwargs) -> None:  # noqa: E501
        """Update Metering Unit  # noqa: E501

        Update metering unit.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_metering_unit_by_id(metering_unit_id, body, async_req=True)
        >>> result = thread.get()

        :param metering_unit_id: Metering Unit ID (required)
        :type metering_unit_id: str
        :param body:
        :type body: MeteringUnitProps
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_metering_unit_by_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_metering_unit_by_id_with_http_info(metering_unit_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def update_metering_unit_by_id_with_http_info(self, metering_unit_id : Annotated[StrictStr, Field(..., description="Metering Unit ID")], body : Optional[MeteringUnitProps] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Metering Unit  # noqa: E501

        Update metering unit.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_metering_unit_by_id_with_http_info(metering_unit_id, body, async_req=True)
        >>> result = thread.get()

        :param metering_unit_id: Metering Unit ID (required)
        :type metering_unit_id: str
        :param body:
        :type body: MeteringUnitProps
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'metering_unit_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_metering_unit_by_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['metering_unit_id']:
            _path_params['metering_unit_id'] = _params['metering_unit_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/metering/units/{metering_unit_id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_metering_unit_timestamp_count(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], timestamp : Annotated[StrictInt, Field(..., description="Timestamp")], update_metering_unit_timestamp_count_param : Optional[UpdateMeteringUnitTimestampCountParam] = None, **kwargs) -> MeteringUnitTimestampCount:  # noqa: E501
        """Update Metering Unit Count for Specified Timestamp  # noqa: E501

        Update metering unit count for the specified timestamp.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_metering_unit_timestamp_count(tenant_id, metering_unit_name, timestamp, update_metering_unit_timestamp_count_param, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param timestamp: Timestamp (required)
        :type timestamp: int
        :param update_metering_unit_timestamp_count_param:
        :type update_metering_unit_timestamp_count_param: UpdateMeteringUnitTimestampCountParam
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MeteringUnitTimestampCount
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_metering_unit_timestamp_count_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_metering_unit_timestamp_count_with_http_info(tenant_id, metering_unit_name, timestamp, update_metering_unit_timestamp_count_param, **kwargs)  # noqa: E501

    @validate_arguments
    def update_metering_unit_timestamp_count_with_http_info(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], timestamp : Annotated[StrictInt, Field(..., description="Timestamp")], update_metering_unit_timestamp_count_param : Optional[UpdateMeteringUnitTimestampCountParam] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Metering Unit Count for Specified Timestamp  # noqa: E501

        Update metering unit count for the specified timestamp.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_metering_unit_timestamp_count_with_http_info(tenant_id, metering_unit_name, timestamp, update_metering_unit_timestamp_count_param, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param timestamp: Timestamp (required)
        :type timestamp: int
        :param update_metering_unit_timestamp_count_param:
        :type update_metering_unit_timestamp_count_param: UpdateMeteringUnitTimestampCountParam
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MeteringUnitTimestampCount, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant_id',
            'metering_unit_name',
            'timestamp',
            'update_metering_unit_timestamp_count_param'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_metering_unit_timestamp_count" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant_id']:
            _path_params['tenant_id'] = _params['tenant_id']

        if _params['metering_unit_name']:
            _path_params['metering_unit_name'] = _params['metering_unit_name']

        if _params['timestamp']:
            _path_params['timestamp'] = _params['timestamp']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_metering_unit_timestamp_count_param'] is not None:
            _body_params = _params['update_metering_unit_timestamp_count_param']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "MeteringUnitTimestampCount",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/metering/tenants/{tenant_id}/units/{metering_unit_name}/timestamp/{timestamp}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_metering_unit_timestamp_count_now(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], update_metering_unit_timestamp_count_now_param : Optional[UpdateMeteringUnitTimestampCountNowParam] = None, **kwargs) -> MeteringUnitTimestampCount:  # noqa: E501
        """Update Metering Unit Count for Current Time  # noqa: E501

        Update the metering unit count for the current time.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_metering_unit_timestamp_count_now(tenant_id, metering_unit_name, update_metering_unit_timestamp_count_now_param, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param update_metering_unit_timestamp_count_now_param:
        :type update_metering_unit_timestamp_count_now_param: UpdateMeteringUnitTimestampCountNowParam
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MeteringUnitTimestampCount
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_metering_unit_timestamp_count_now_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_metering_unit_timestamp_count_now_with_http_info(tenant_id, metering_unit_name, update_metering_unit_timestamp_count_now_param, **kwargs)  # noqa: E501

    @validate_arguments
    def update_metering_unit_timestamp_count_now_with_http_info(self, tenant_id : Annotated[StrictStr, Field(..., description="Tenant ID")], metering_unit_name : Annotated[StrictStr, Field(..., description="Metering Unit Name")], update_metering_unit_timestamp_count_now_param : Optional[UpdateMeteringUnitTimestampCountNowParam] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Metering Unit Count for Current Time  # noqa: E501

        Update the metering unit count for the current time.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_metering_unit_timestamp_count_now_with_http_info(tenant_id, metering_unit_name, update_metering_unit_timestamp_count_now_param, async_req=True)
        >>> result = thread.get()

        :param tenant_id: Tenant ID (required)
        :type tenant_id: str
        :param metering_unit_name: Metering Unit Name (required)
        :type metering_unit_name: str
        :param update_metering_unit_timestamp_count_now_param:
        :type update_metering_unit_timestamp_count_now_param: UpdateMeteringUnitTimestampCountNowParam
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MeteringUnitTimestampCount, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'tenant_id',
            'metering_unit_name',
            'update_metering_unit_timestamp_count_now_param'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_metering_unit_timestamp_count_now" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['tenant_id']:
            _path_params['tenant_id'] = _params['tenant_id']

        if _params['metering_unit_name']:
            _path_params['metering_unit_name'] = _params['metering_unit_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_metering_unit_timestamp_count_now_param'] is not None:
            _body_params = _params['update_metering_unit_timestamp_count_now_param']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Bearer']  # noqa: E501

        _response_types_map = {
            '200': "MeteringUnitTimestampCount",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/metering/tenants/{tenant_id}/units/{metering_unit_name}/now', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
