# coding: utf-8

"""
    SaaSus Pricing API Schema

    SaaSus Pricing API Schema

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import ConfigDict, BaseModel, Field, StrictBool, StrictStr
from saasus_sdk_python.src.pricing.models.aggregate_usage import AggregateUsage

class MeteringUnit(BaseModel):
    """
    MeteringUnit
    """
    unit_name: StrictStr = Field(..., description="Metering unit name")
    aggregate_usage: Optional[AggregateUsage] = None
    display_name: StrictStr = Field(..., description="Display name")
    description: StrictStr = Field(..., description="Description")
    id: StrictStr = Field(..., description="Universally Unique Identifier")
    used: StrictBool = Field(..., description="Metering unit used settings")
    __properties = ["unit_name", "aggregate_usage", "display_name", "description", "id", "used"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MeteringUnit:
        """Create an instance of MeteringUnit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MeteringUnit:
        """Create an instance of MeteringUnit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MeteringUnit.parse_obj(obj)

        _obj = MeteringUnit.parse_obj({
            "unit_name": obj.get("unit_name"),
            "aggregate_usage": obj.get("aggregate_usage"),
            "display_name": obj.get("display_name"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "used": obj.get("used")
        })
        return _obj


