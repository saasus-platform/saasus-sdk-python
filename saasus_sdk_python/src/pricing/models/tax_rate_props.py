# coding: utf-8

"""
    SaaSus Pricing API Schema

    SaaSus Pricing API Schema

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import field_validator, StringConstraints, ConfigDict, BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing_extensions import Annotated

class TaxRateProps(BaseModel):
    """
    TaxRateProps
    """
    name: StrictStr = Field(..., description="Name of tax rate")
    display_name: StrictStr = Field(..., description="Display name")
    percentage: Union[StrictFloat, StrictInt] = Field(..., description="Percentage")
    inclusive: StrictBool = Field(..., description="Inclusive or not")
    country: Annotated[str, StringConstraints(strict=True)] = Field(..., description="Country code of ISO 3166-1 alpha-2")
    description: StrictStr = Field(..., description="Description")
    __properties = ["name", "display_name", "percentage", "inclusive", "country", "description"]

    @field_validator('country')
    @classmethod
    def country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{2}$/")
        return value
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TaxRateProps:
        """Create an instance of TaxRateProps from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TaxRateProps:
        """Create an instance of TaxRateProps from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TaxRateProps.parse_obj(obj)

        _obj = TaxRateProps.parse_obj({
            "name": obj.get("name"),
            "display_name": obj.get("display_name"),
            "percentage": obj.get("percentage"),
            "inclusive": obj.get("inclusive"),
            "country": obj.get("country"),
            "description": obj.get("description")
        })
        return _obj


