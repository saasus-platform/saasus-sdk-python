# coding: utf-8

"""
    SaaSus Auth API Schema

    Schema

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BillingAddress(BaseModel):
    """
    BillingAddress
    """ # noqa: E501
    street: StrictStr = Field(description="Street address, apartment or suite number.")
    city: StrictStr = Field(description="City, district, suburb, town, or village.")
    state: StrictStr = Field(description="State name or abbreviation.")
    country: Annotated[str, Field(strict=True)] = Field(description="Country of the address using ISO 3166-1 alpha-2 code.")
    additional_address_info: Optional[StrictStr] = Field(default=None, description="Additional information about the address, such as a building name, floor, or department name.")
    postal_code: StrictStr = Field(description="ZIP or postal code.")
    __properties: ClassVar[List[str]] = ["street", "city", "state", "country", "additional_address_info", "postal_code"]

    @field_validator('country')
    def country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{2}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BillingAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BillingAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "street": obj.get("street"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "country": obj.get("country"),
            "additional_address_info": obj.get("additional_address_info"),
            "postal_code": obj.get("postal_code")
        })
        return _obj


