# coding: utf-8

"""
    SaaSus Auth API Schema

    Schema

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import ConfigDict, BaseModel, Field
from saasus_sdk_python.src.auth.models.message_template import MessageTemplate

class NotificationMessages(BaseModel):
    """
    NotificationMessages
    """
    sign_up: MessageTemplate = Field(...)
    create_user: MessageTemplate = Field(...)
    resend_code: MessageTemplate = Field(...)
    forgot_password: MessageTemplate = Field(...)
    update_user_attribute: MessageTemplate = Field(...)
    verify_user_attribute: MessageTemplate = Field(...)
    authentication_mfa: MessageTemplate = Field(...)
    invite_tenant_user: MessageTemplate = Field(...)
    verify_external_user: MessageTemplate = Field(...)
    __properties = ["sign_up", "create_user", "resend_code", "forgot_password", "update_user_attribute", "verify_user_attribute", "authentication_mfa", "invite_tenant_user", "verify_external_user"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NotificationMessages:
        """Create an instance of NotificationMessages from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of sign_up
        if self.sign_up:
            _dict['sign_up'] = self.sign_up.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_user
        if self.create_user:
            _dict['create_user'] = self.create_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resend_code
        if self.resend_code:
            _dict['resend_code'] = self.resend_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of forgot_password
        if self.forgot_password:
            _dict['forgot_password'] = self.forgot_password.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_user_attribute
        if self.update_user_attribute:
            _dict['update_user_attribute'] = self.update_user_attribute.to_dict()
        # override the default output from pydantic by calling `to_dict()` of verify_user_attribute
        if self.verify_user_attribute:
            _dict['verify_user_attribute'] = self.verify_user_attribute.to_dict()
        # override the default output from pydantic by calling `to_dict()` of authentication_mfa
        if self.authentication_mfa:
            _dict['authentication_mfa'] = self.authentication_mfa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invite_tenant_user
        if self.invite_tenant_user:
            _dict['invite_tenant_user'] = self.invite_tenant_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of verify_external_user
        if self.verify_external_user:
            _dict['verify_external_user'] = self.verify_external_user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NotificationMessages:
        """Create an instance of NotificationMessages from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NotificationMessages.parse_obj(obj)

        _obj = NotificationMessages.parse_obj({
            "sign_up": MessageTemplate.from_dict(obj.get("sign_up")) if obj.get("sign_up") is not None else None,
            "create_user": MessageTemplate.from_dict(obj.get("create_user")) if obj.get("create_user") is not None else None,
            "resend_code": MessageTemplate.from_dict(obj.get("resend_code")) if obj.get("resend_code") is not None else None,
            "forgot_password": MessageTemplate.from_dict(obj.get("forgot_password")) if obj.get("forgot_password") is not None else None,
            "update_user_attribute": MessageTemplate.from_dict(obj.get("update_user_attribute")) if obj.get("update_user_attribute") is not None else None,
            "verify_user_attribute": MessageTemplate.from_dict(obj.get("verify_user_attribute")) if obj.get("verify_user_attribute") is not None else None,
            "authentication_mfa": MessageTemplate.from_dict(obj.get("authentication_mfa")) if obj.get("authentication_mfa") is not None else None,
            "invite_tenant_user": MessageTemplate.from_dict(obj.get("invite_tenant_user")) if obj.get("invite_tenant_user") is not None else None,
            "verify_external_user": MessageTemplate.from_dict(obj.get("verify_external_user")) if obj.get("verify_external_user") is not None else None
        })
        return _obj


