# coding: utf-8

"""
    SaaSus Auth API Schema

    Schema

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import ConfigDict, BaseModel, Field, StrictStr

class CustomizePageSettings(BaseModel):
    """
    CustomizePageSettings
    """
    title: StrictStr = Field(..., description="service name")
    terms_of_service_url: StrictStr = Field(..., description="terms of service URL")
    privacy_policy_url: StrictStr = Field(..., description="privacy policy URL")
    google_tag_manager_container_id: StrictStr = Field(..., description="Google Tag Manager container ID")
    icon: StrictStr = Field(..., description="service icon")
    favicon: StrictStr = Field(..., description="favicon")
    __properties = ["title", "terms_of_service_url", "privacy_policy_url", "google_tag_manager_container_id", "icon", "favicon"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomizePageSettings:
        """Create an instance of CustomizePageSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomizePageSettings:
        """Create an instance of CustomizePageSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomizePageSettings.parse_obj(obj)

        _obj = CustomizePageSettings.parse_obj({
            "title": obj.get("title"),
            "terms_of_service_url": obj.get("terms_of_service_url"),
            "privacy_policy_url": obj.get("privacy_policy_url"),
            "google_tag_manager_container_id": obj.get("google_tag_manager_container_id"),
            "icon": obj.get("icon"),
            "favicon": obj.get("favicon")
        })
        return _obj


