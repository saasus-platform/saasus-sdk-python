# coding: utf-8

"""
    SaaSus Auth API Schema

    Schema

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List
from pydantic import ConfigDict, BaseModel, Field, StrictStr
from saasus_sdk_python.src.auth.models.user_available_env import UserAvailableEnv
from typing_extensions import Annotated

class User(BaseModel):
    """
    User
    """
    id: StrictStr = Field(..., description="User ID")
    tenant_id: StrictStr = Field(...)
    tenant_name: StrictStr = Field(..., description="Tenant Name")
    email: StrictStr = Field(..., description="E-mail")
    attributes: Dict[str, Any] = Field(..., description="Attribute information (Get information set by defining user attributes in the SaaS development console) ")
    envs: Annotated[List[UserAvailableEnv], Field()] = Field(...)
    __properties = ["id", "tenant_id", "tenant_name", "email", "attributes", "envs"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> User:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in envs (list)
        _items = []
        if self.envs:
            for _item in self.envs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['envs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> User:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return User.parse_obj(obj)

        _obj = User.parse_obj({
            "id": obj.get("id"),
            "tenant_id": obj.get("tenant_id"),
            "tenant_name": obj.get("tenant_name"),
            "email": obj.get("email"),
            "attributes": obj.get("attributes"),
            "envs": [UserAvailableEnv.from_dict(_item) for _item in obj.get("envs")] if obj.get("envs") is not None else None
        })
        return _obj


