# coding: utf-8

"""
    SaaSus Auth API Schema

    Schema

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import ConfigDict, BaseModel, Field, StrictStr
from saasus_sdk_python.src.auth.models.challenge_name import ChallengeName

class RespondToSignInChallengeParam(BaseModel):
    """
    Parameters required to respond to a sign-in challenge 
    """
    challenge_name: ChallengeName = Field(...)
    challenge_responses: Optional[Dict[str, StrictStr]] = Field(None, description="Responses to the challenge. The required responses vary depending on the challenge_name. ")
    session: Optional[StrictStr] = Field(None, description="Session identifier for the challenge. ")
    __properties = ["challenge_name", "challenge_responses", "session"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RespondToSignInChallengeParam:
        """Create an instance of RespondToSignInChallengeParam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RespondToSignInChallengeParam:
        """Create an instance of RespondToSignInChallengeParam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RespondToSignInChallengeParam.parse_obj(obj)

        _obj = RespondToSignInChallengeParam.parse_obj({
            "challenge_name": obj.get("challenge_name"),
            "challenge_responses": obj.get("challenge_responses"),
            "session": obj.get("session")
        })
        return _obj


