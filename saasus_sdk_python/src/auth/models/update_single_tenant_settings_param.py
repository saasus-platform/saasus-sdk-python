# coding: utf-8

"""
    SaaSus Auth API Schema

    Schema

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import ConfigDict, BaseModel, Field, StrictBool, StrictStr

class UpdateSingleTenantSettingsParam(BaseModel):
    """
    UpdateSingleTenantSettingsParam
    """
    enabled: Optional[StrictBool] = Field(None, description="enable Single Tenant settings or not")
    role_arn: Optional[StrictStr] = Field(None, description="ARN of the role for SaaS Platform to AssumeRole")
    cloudformation_template: Optional[StrictStr] = Field(None, description="CloudFormation template file")
    ddl_template: Optional[StrictStr] = Field(None, description="ddl file to run in SaaS environment")
    role_external_id: Optional[StrictStr] = Field(None, description="External id used by SaaSus when AssumeRole to operate SaaS")
    __properties = ["enabled", "role_arn", "cloudformation_template", "ddl_template", "role_external_id"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateSingleTenantSettingsParam:
        """Create an instance of UpdateSingleTenantSettingsParam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateSingleTenantSettingsParam:
        """Create an instance of UpdateSingleTenantSettingsParam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateSingleTenantSettingsParam.parse_obj(obj)

        _obj = UpdateSingleTenantSettingsParam.parse_obj({
            "enabled": obj.get("enabled"),
            "role_arn": obj.get("role_arn"),
            "cloudformation_template": obj.get("cloudformation_template"),
            "ddl_template": obj.get("ddl_template"),
            "role_external_id": obj.get("role_external_id")
        })
        return _obj


