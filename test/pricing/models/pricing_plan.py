# coding: utf-8

"""
    SaaSus Pricing API Schema

    SaaSus Pricing API Schema

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from saasus_sdk_python.src.pricing.models.pricing_menu import PricingMenu
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PricingPlan(BaseModel):
    """
    PricingPlan
    """ # noqa: E501
    name: StrictStr = Field(description="料金プラン名")
    display_name: StrictStr = Field(description="料金プラン表示名")
    description: StrictStr = Field(description="料金プラン説明")
    used: StrictBool = Field(description="料金プランの使用済み設定")
    pricing_menus: List[PricingMenu]
    id: StrictStr = Field(description="ユニバーサル一意識別子")
    __properties: ClassVar[List[str]] = ["name", "display_name", "description", "used", "pricing_menus", "id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PricingPlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pricing_menus (list)
        _items = []
        if self.pricing_menus:
            for _item in self.pricing_menus:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pricing_menus'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PricingPlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "display_name": obj.get("display_name"),
            "description": obj.get("description"),
            "used": obj.get("used"),
            "pricing_menus": [PricingMenu.from_dict(_item) for _item in obj.get("pricing_menus")] if obj.get("pricing_menus") is not None else None,
            "id": obj.get("id")
        })
        return _obj


