# coding: utf-8

"""
    SaaSus Communication API Schema

    SaaSus Communication API Schema

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import ConfigDict, BaseModel, Field, StrictInt, StrictStr
from saasus_sdk_python.src.communication.models.comment import Comment
from saasus_sdk_python.src.communication.models.user import User
from typing_extensions import Annotated

class Feedback(BaseModel):
    """
    Feedback
    """
    feedback_title: StrictStr = Field(...)
    feedback_description: StrictStr = Field(...)
    comments: Annotated[List[Comment], Field()] = Field(...)
    count: StrictInt = Field(...)
    users: Annotated[List[User], Field()] = Field(...)
    id: StrictStr = Field(...)
    user_id: StrictStr = Field(...)
    created_at: StrictInt = Field(...)
    status: StrictInt = Field(...)
    __properties = ["feedback_title", "feedback_description", "comments", "count", "users", "id", "user_id", "created_at", "status"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Feedback:
        """Create an instance of Feedback from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in comments (list)
        _items = []
        if self.comments:
            for _item in self.comments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['comments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item in self.users:
                if _item:
                    _items.append(_item.to_dict())
            _dict['users'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Feedback:
        """Create an instance of Feedback from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Feedback.parse_obj(obj)

        _obj = Feedback.parse_obj({
            "feedback_title": obj.get("feedback_title"),
            "feedback_description": obj.get("feedback_description"),
            "comments": [Comment.from_dict(_item) for _item in obj.get("comments")] if obj.get("comments") is not None else None,
            "count": obj.get("count"),
            "users": [User.from_dict(_item) for _item in obj.get("users")] if obj.get("users") is not None else None,
            "id": obj.get("id"),
            "user_id": obj.get("user_id"),
            "created_at": obj.get("created_at"),
            "status": obj.get("status")
        })
        return _obj


