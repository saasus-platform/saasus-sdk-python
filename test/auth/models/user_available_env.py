# coding: utf-8

"""
    SaaSus Auth API Schema

    スキーマ

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from saasus_sdk_python.src.auth.models.role import Role

class UserAvailableEnv(BaseModel):
    """
    UserAvailableEnv
    """
    id: StrictInt = Field(...)
    name: StrictStr = Field(..., description="環境名(env name)")
    display_name: Optional[StrictStr] = Field(None, description="環境表示名(env display name)")
    roles: conlist(Role) = Field(..., description="役割(ロール)情報(role info)")
    __properties = ["id", "name", "display_name", "roles"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserAvailableEnv:
        """Create an instance of UserAvailableEnv from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserAvailableEnv:
        """Create an instance of UserAvailableEnv from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserAvailableEnv.parse_obj(obj)

        _obj = UserAvailableEnv.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "display_name": obj.get("display_name"),
            "roles": [Role.from_dict(_item) for _item in obj.get("roles")] if obj.get("roles") is not None else None
        })
        return _obj


