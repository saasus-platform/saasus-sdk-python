# coding: utf-8

"""
    SaaSus Auth API Schema

    Schema

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import ConfigDict, BaseModel, Field, StrictBool, StrictInt, StrictStr
from saasus_sdk_python.src.auth.models.proration_behavior import ProrationBehavior

class PlanReservation(BaseModel):
    """
    PlanReservation
    """
    next_plan_id: Optional[StrictStr] = None
    using_next_plan_from: Optional[StrictInt] = Field(None, description="This parameter is set when reserving a pricing plan change for a future date and time. It is not required for immediate application. When specifying the next pricing plan start date and time, please specify a date and time at least 5 minutes after the current time. Note for Stripe integration: By specifying the beginning of the current month (00:00 UTC) as the start date and time, you can create a subscription that starts from the first day of that month. (Example: To specify January 1, 2023 00:00 UTC â†’ 1672531200) ")
    next_plan_tax_rate_id: Optional[StrictStr] = None
    proration_behavior: Optional[ProrationBehavior] = None
    delete_usage: Optional[StrictBool] = Field(None, description="If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled. ")
    __properties = ["next_plan_id", "using_next_plan_from", "next_plan_tax_rate_id", "proration_behavior", "delete_usage"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlanReservation:
        """Create an instance of PlanReservation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlanReservation:
        """Create an instance of PlanReservation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlanReservation.parse_obj(obj)

        _obj = PlanReservation.parse_obj({
            "next_plan_id": obj.get("next_plan_id"),
            "using_next_plan_from": obj.get("using_next_plan_from"),
            "next_plan_tax_rate_id": obj.get("next_plan_tax_rate_id"),
            "proration_behavior": obj.get("proration_behavior"),
            "delete_usage": obj.get("delete_usage")
        })
        return _obj


