# coding: utf-8

"""
    SaaSus Auth API Schema

    スキーマ

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class BillingAddress(BaseModel):
    """
    BillingAddress
    """
    street: StrictStr = Field(..., description="住所の通りの名前や番地を含めた部分  Street address, apartment or suite number. ")
    city: StrictStr = Field(..., description="住所の市区町村  City, district, suburb, town, or village. ")
    state: StrictStr = Field(..., description="住所の都道府県または州  State name or abbreviation. ")
    country: constr(strict=True) = Field(..., description="住所の国を ISO 3166-1 alpha-2 コードで指定します。  Country of the address using ISO 3166-1 alpha-2 code. ")
    additional_address_info: Optional[StrictStr] = Field(None, description="建物名・部屋番号などの住所に関する追加情報  Additional information about the address, such as a building name, floor, or department name. ")
    postal_code: StrictStr = Field(..., description="郵便番号  ZIP or postal code. ")
    __properties = ["street", "city", "state", "country", "additional_address_info", "postal_code"]

    @validator('country')
    def country_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z]{2}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{2}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BillingAddress:
        """Create an instance of BillingAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BillingAddress:
        """Create an instance of BillingAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BillingAddress.parse_obj(obj)

        _obj = BillingAddress.parse_obj({
            "street": obj.get("street"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "country": obj.get("country"),
            "additional_address_info": obj.get("additional_address_info"),
            "postal_code": obj.get("postal_code")
        })
        return _obj


