# coding: utf-8

"""
    SaaSus Auth API Schema

    Schema

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import field_validator, ConfigDict, BaseModel, Field, StrictStr

class SignInParam(BaseModel):
    """
    Parameters required for user sign-in The required parameters vary depending on the sign_in_flow. 
    """
    sign_in_flow: StrictStr = Field(..., description="The sign-in flow to use for authentication. Currently, only USER_SRP_AUTH is supported. ")
    sign_in_parameters: Optional[Dict[str, StrictStr]] = Field(None, description="The required parameters vary depending on the sign_in_flow. USER_SRP_AUTH:   USERNAME: email address   SRP_A: SRP A value ")
    __properties = ["sign_in_flow", "sign_in_parameters"]

    @field_validator('sign_in_flow')
    @classmethod
    def sign_in_flow_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('USER_SRP_AUTH'):
            raise ValueError("must be one of enum values ('USER_SRP_AUTH')")
        return value
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SignInParam:
        """Create an instance of SignInParam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SignInParam:
        """Create an instance of SignInParam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SignInParam.parse_obj(obj)

        _obj = SignInParam.parse_obj({
            "sign_in_flow": obj.get("sign_in_flow"),
            "sign_in_parameters": obj.get("sign_in_parameters")
        })
        return _obj


