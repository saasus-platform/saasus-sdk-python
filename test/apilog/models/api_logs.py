# coding: utf-8

"""
    SaaSus ApiLog API Schema

    SaaSus ApiLog API Schema

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import ConfigDict, BaseModel, Field, StrictStr
from saasus_sdk_python.src.apilog.models.api_log import ApiLog
from typing_extensions import Annotated

class ApiLogs(BaseModel):
    """
    ApiLogs
    """
    api_logs: Annotated[List[ApiLog], Field()] = Field(...)
    cursor: Optional[StrictStr] = Field(None, description="Cursor for cursor pagination")
    __properties = ["api_logs", "cursor"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiLogs:
        """Create an instance of ApiLogs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in api_logs (list)
        _items = []
        if self.api_logs:
            for _item in self.api_logs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['api_logs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiLogs:
        """Create an instance of ApiLogs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiLogs.parse_obj(obj)

        _obj = ApiLogs.parse_obj({
            "api_logs": [ApiLog.from_dict(_item) for _item in obj.get("api_logs")] if obj.get("api_logs") is not None else None,
            "cursor": obj.get("cursor")
        })
        return _obj


